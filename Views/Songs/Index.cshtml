@model IEnumerable<SpotifyClone.Models.Song>

@{
    ViewData["Title"] = "Your Songs";
}

<div class="container mx-auto">
    <h2 class="text-3xl font-bold mb-8">Your Songs</h2>

    <div class="flex justify-between items-center mb-8">
        <form asp-action="Scan" method="post" id="scan-form">
            <button type="submit" id="scan-btn" class="bg-green-500 hover:bg-green-400 text-white px-4 py-2 rounded flex items-center">
                <span id="scan-text">Scan Music Folder</span>
                <div id="scan-spinner" class="hidden ml-2 animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            </button>
        </form>
        <form asp-action="Index" method="get" class="flex">
            <input type="text" name="search" value="@ViewBag.Search" placeholder="Search songs..." class="px-3 py-2 bg-gray-700 border border-gray-600 rounded-l text-white" />
            <button type="submit" class="bg-green-500 hover:bg-green-400 text-white px-4 py-2 rounded-r">Search</button>
        </form>
    </div>

    @if (ViewBag.TotalPages > 1)
    {
        <div class="flex justify-center mb-8">
            @if (ViewBag.CurrentPage > 1)
            {
                <a asp-action="Index" asp-route-search="@ViewBag.Search" asp-route-page="@(ViewBag.CurrentPage - 1)" class="bg-gray-600 hover:bg-gray-500 text-white px-3 py-2 rounded-l">Previous</a>
            }
            @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
            {
                <a asp-action="Index" asp-route-search="@ViewBag.Search" asp-route-page="@i" class="bg-gray-700 hover:bg-gray-600 text-white px-3 py-2 @(i == ViewBag.CurrentPage ? "bg-green-500" : "")">@i</a>
            }
            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
            {
                <a asp-action="Index" asp-route-search="@ViewBag.Search" asp-route-page="@(ViewBag.CurrentPage + 1)" class="bg-gray-600 hover:bg-gray-500 text-white px-3 py-2 rounded-r">Next</a>
            }
        </div>
    }

    <script>
        document.getElementById('scan-form').addEventListener('submit', function() {
            document.getElementById('scan-text').textContent = 'Scanning...';
            document.getElementById('scan-spinner').classList.remove('hidden');
            document.getElementById('scan-btn').disabled = true;
        });
    </script>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var song in Model)
        {
            <div class="bg-gray-800 p-6 rounded-lg">
                @if (string.IsNullOrEmpty(song.AlbumArtUrl) || song.AlbumArtUrl.Contains("via.placeholder.com"))
                {
                    <div class="w-32 h-32 mb-4 rounded bg-gray-600 flex items-center justify-center text-gray-400 text-sm">
                        No Art
                    </div>
                }
                else
                {
                    <img src="@song.AlbumArtUrl" alt="Album Art" class="w-32 h-32 mb-4 rounded" />
                }
                <h5 class="text-xl font-semibold mb-2">@song.Title</h5>
                <p class="text-gray-300">Artist: @song.Artist</p>
                <p class="text-gray-300">Album: @song.Album</p>
                <div class="flex space-x-2 mt-4">
                    <button onclick="playSong(@song.Id, '@song.Title', '/Songs/Stream/@song.Id', 'play-btn-@song.Id')" class="bg-green-500 hover:bg-green-400 text-white px-4 py-2 rounded relative" id="play-btn-@song.Id">
                        <span class="play-spinner-@song.Id hidden absolute inset-0 flex items-center justify-center">
                            <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                        <span class="play-icon-@song.Id">Play</span>
                    </button>
                    <button onclick="toggleFavorite(@song.Id)" class="bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded">‚ù§Ô∏è</button>
                    <button onclick="showAddToPlaylistModal(@song.Id, '@song.Title')" class="bg-blue-600 hover:bg-blue-500 text-white px-4 py-2 rounded">üìã</button>
                </div>
            </div>
        }
    </div>

    <!-- Add to Playlist Modal -->
    <div id="addToPlaylistModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
                <h3 class="text-xl font-bold mb-4">Add to Playlist</h3>
                <p id="modalSongTitle" class="text-gray-300 mb-4"></p>

                <div class="space-y-3">
                    <div>
                        <label class="block text-sm font-medium mb-2">Select Playlist</label>
                        <select id="playlistSelect" class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white">
                            <option value="">Choose a playlist</option>
                            @if (ViewBag.Playlists != null)
                            {
                                foreach (var playlist in ViewBag.Playlists)
                                {
                                    <option value="@playlist.Id">@playlist.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="text-center text-gray-400">or</div>

                    <div>
                        <label class="block text-sm font-medium mb-2">Create New Playlist</label>
                        <input type="text" id="newPlaylistName" placeholder="Enter playlist name" class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white" />
                    </div>
                </div>

                <div class="flex space-x-3 mt-6">
                    <button onclick="addToPlaylist()" class="flex-1 bg-green-500 hover:bg-green-400 text-white px-4 py-2 rounded">Add</button>
                    <button onclick="closeAddToPlaylistModal()" class="flex-1 bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/player.js" asp-append-version="true"></script>
<script>
    let currentSongId = null;

    function showAddToPlaylistModal(songId, songTitle) {
        currentSongId = songId;
        document.getElementById('modalSongTitle').textContent = songTitle;
        document.getElementById('addToPlaylistModal').classList.remove('hidden');
        document.getElementById('newPlaylistName').value = '';
        document.getElementById('playlistSelect').value = '';
    }

    function closeAddToPlaylistModal() {
        document.getElementById('addToPlaylistModal').classList.add('hidden');
        currentSongId = null;
    }

    async function addToPlaylist() {
        if (!currentSongId) return;

        const selectedPlaylistId = document.getElementById('playlistSelect').value;
        const newPlaylistName = document.getElementById('newPlaylistName').value.trim();

        let playlistId = selectedPlaylistId;

        // If creating new playlist
        if (!playlistId && newPlaylistName) {
            try {
                const createResponse = await fetch('/Playlists/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: new URLSearchParams({ name: newPlaylistName })
                });

                if (createResponse.ok) {
                    const result = await createResponse.json();
                    playlistId = result.id;
                } else {
                    alert('Failed to create playlist');
                    return;
                }
            } catch (error) {
                alert('Error creating playlist');
                return;
            }
        }

        if (!playlistId) {
            alert('Please select a playlist or enter a name for a new playlist');
            return;
        }

        // Add song to playlist
        try {
            const response = await fetch('/Playlists/AddSong', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: new URLSearchParams({ playlistId: playlistId, songId: currentSongId })
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    alert('Song added to playlist successfully!');
                    closeAddToPlaylistModal();
                } else {
                    alert(result.message || 'Failed to add song to playlist');
                }
            } else {
                alert('Failed to add song to playlist');
            }
        } catch (error) {
            alert('Error adding song to playlist');
        }
    }
</script>